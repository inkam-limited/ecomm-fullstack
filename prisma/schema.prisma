generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id
  email        String     @unique
  firstName    String
  lastName     String
  profileImage String
  createdAt    DateTime   @default(now())
  isAdmin      Boolean    @default(false)
  isProAccount Boolean    @default(false)
  blogPost     BlogPost[]
  orders       Order[]
  Product      Product[]
  Review       Review[]
}

model BlogPost {
  id          String        @id @default(uuid())
  title       String
  coverImage  String
  status      ProductStatus @default(published)
  thumbnail   String?
  content     Json
  createdById String
  createdAt   DateTime      @default(now())
  isFeatured  Boolean       @default(false)
  createdBy   User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Product {
  id              String          @id @default(uuid())
  name            String
  status          ProductStatus
  price           Int
  images          String[]
  isFeatured      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  createdById     String?
  productFileLink String?
  description     Json
  averageRating   Float?          @default(0.00)
  OrderItem       OrderItem[]
  createdBy       User?           @relation(fields: [createdById], references: [id], onDelete: Cascade)
  reviews         Review[]
  prouductImages  UploadedImage[]
  category        Category[]      @relation("CategoryToProduct")
}

model UploadedImage {
  id          String   @id @default(uuid())
  imageString String
  caption     String
  productId   String?
  Product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id          String   @id @default(uuid())
  rating      Int
  comment     String
  createdById String
  productId   String
  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Banner {
  id          String   @id @default(uuid())
  title       String
  imageString String
  createdAt   DateTime @default(now())
}

model Order {
  id            String      @id @default(uuid())
  amount        Int
  userId        String
  createdAt     DateTime    @default(now())
  payStatus     String
  transactionId String      @unique
  status        OrderStatus @default(pending)
  paidAmount    Int         @default(0)
  productId     String?
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem     OrderItem[]
}

model OrderItem {
  quantity  Int
  price     Int
  productId String
  orderId   String
  createdAt DateTime @default(now())
  id        String   @id @default(uuid())
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  imageString String?
  products    Product[] @relation("CategoryToProduct")
}

enum OrderStatus {
  pending
  paid
  cancelled
}

enum ProductStatus {
  draft
  published
  archived
}
